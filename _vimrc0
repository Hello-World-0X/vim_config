let $vim="d:/tools/vim/vim/vim73/"
let $vimrc="d:/tools/vim/vim/_vimrc"
let $ses="e:/temp/vimSession.vim"
let $session="e:/temp/vimSession.vim"
" look==========================================================================
"indent
set nocompatible
set magic
"ruler
set ruler " ru
set autoindent " ai
set sw=4
set tabstop=4 " ts
"display as more lines as possible, do not use @@
set display=lastline " dy=lastline

" ignore case while search
" set ignorecase " noignorecase

set backspace=indent,eol,start
set number
set encoding=utf-8
" language
" set langmenu=zh_CN.UTF-8
" language message zh_CN.UTF-8
" set filetype when there is no filetype found
autocmd BufRead,BufNewFile *.thrift setfiletype thrift
autocmd BufRead,BufNewFile *.proto setfiletype proto
autocmd BufRead,BufNewFile *.proto setfiletype protocols
autocmd BufRead,BufNewFile *.cpp setfiletype cpp
autocmd BufRead,BufNewFile _vimrc setfiletype vim


set clipboard+=unnamed
" set ff=dos

" set right margin
set cc=80 " colorcolumn=80 " cc=80
" hilight current line
set cursorline
" hilight column
set cursorcolumn

" theme
colorscheme Monokai_Gavin
set guifont=Consolas:h13
syntax enable
syntax on
if &term == "builtin_gui"
	" do nonthing
" 	echo "do nothing"
else
" 	set term=xterm-256color
" 	echo "xterm-256color"
endif

" show white spaces
set listchars=tab:>-,trail:-
set list
if &term == "builtin_gui"
" 	set window size
	set lines=25 columns=100
" 	simalt ~x " ~x max ~n min ~r restore
" 	toggle menu bar, tool bar
	set guioptions-=T " += is on, -= is off
	set guioptions-=m 
	set selectmode+=mouse
endif

" other ========================================================================
set nobackup
set hlsearch
set showmatch
filetype on

" autocmd BufWinLeave *.ztx mkview
" autocmd BufWinEnter *.ztx silent loadview

" tags, taglist, file explorer
set tags=tags;
set autochdir
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_Right_Window = 1

"let g:winManagerWindowLayout='FileExplorer|TagList'
"nmap wm :WMToggle<cr>

" key maping ===================================================================
"tab mappings
map <M-1> 1gt
map <M-2> 2gt
map <M-3> 3gt
map <M-4> 4gt
map <M-5> 5gt
map <M-6> 6gt
map <M-7> 7gt
map <M-8> 8gt
map <M-9> 9gt
map <M-t> :tabnew<CR>
map <M-w> :tabclose<CR>
map! <M-1> <ESC>1gt
map! <M-2> <ESC>2gt
map! <M-3> <ESC>3gt
map! <M-4> <ESC>4gt
map! <M-5> <ESC>5gt
map! <M-6> <ESC>6gt
map! <M-7> <ESC>7gt
map! <M-8> <ESC>8gt
map! <M-9> <ESC>9gt
map! <M-t> <ESC>:tabnew<CR>
map! <M-w> <ESC>:tabclose<CR>
map <C-Tab> <ESC>gt
imap <C-Tab> <ESC>gt
imap <C-F4> <ESC>:tabc<CR>
map <C-F4> <ESC>:tabc<CR>
 
" Use CTRL-S for saving, also in Insert mode
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>


" comment
function! Comment(commentStr)
	" comment
	 echo a:commentStr
	execute "echo " . '"' . a:commentStr . '"'
	exe 'map cc :s!\(^\s*\)\(.*\)!\1' . a:commentStr . ' \2! <CR> <ESC>:noh<CR>'
	exe 'vmap cc :s!\(^\s*\)\(.*\)!\1' . a:commentStr . ' \2! <CR> <ESC>:noh<CR>'

	" uncomment
	exe 'map cx :s!^\(\s*\)' . a:commentStr . ' \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>'
	exe 'vmap cx :s!^\(\s*\)' . a:commentStr . ' \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>'

	exe 'map cz :s!^\(\s*\)' . a:commentStr . ' \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>'
	exe 'vmap cz :s!^\(\s*\)' . a:commentStr . ' \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>'
endfunction
	

func! CommentC()
	" comment
	map cc :s!^!// ! <CR> <ESC>:noh<CR>
	vmap cc :s!^!// ! <CR> <ESC>:noh<CR>
	" uncomment
	map cx :s!^\(\s*\)//!\1! <CR> <ESC>:noh<CR>
	vmap cx :s!^\(\s*\)//!\1! <CR> <ESC>:noh<CR>

	vmap cz :s!^\(\s*\)\/\/ \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
	nmap cz :s!^\(\s*\)\/\/ \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
endfunction

func! CommentVimrc()
	" comment
	map cc :s!^!" ! <CR> <ESC>:noh<CR>
	vmap cc :s!^!" ! <CR> <ESC>:noh<CR>
	" uncomment
	map cx :s!^\(\s*\)"!\1! <CR> <ESC>:noh<CR>
	vmap cx :s!^\(\s*\)"!\1! <CR> <ESC>:noh<CR>
	vmap cz :s!^\(\s*\)" \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
	nmap cz :s!^\(\s*\)" \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
endfunction

func! CommentTex()
	" comment
	map cc :s!^!%!<CR><ESC>:noh<CR>
	vmap cc :s!^\(\s*\)%!\1!<CR><ESC>:noh<CR>
	" uncomment
	map cx :s!^\(\s*\)%!\1!<CR><ESC>:noh<CR>
	vmap cx :s!^\(\s*\)%!\1!<CR><ESC>:noh<CR>
endfunction

" my functions
function! UncommentC()
"	map :s!^\/\/\@=\s*!!<CR> <ESC>:noh<CR>
"	vmap cz :s!^\(\s*\)\/\/ *\(\t*\)!\1\2!<CR><ESC>:noh<CR>
"	nmap cz :s!^\(\s*\)\/\/ *\(\t*\)!\1\2!<CR><ESC>:noh<CR>
	vmap cz :s!^\(\s*\)\/\/ \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
	nmap cz :s!^\(\s*\)\/\/ \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
endfunction

function! CommentPy()
	" comment
	nmap cc :s!^!# !<CR><ESC>:noh<CR>
	vmap cc :s!^!# !<CR><ESC>:noh<CR>
	" uncomment
	nmap cz :s!^\(\s*\)# \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
	vmap cz :s!^\(\s*\)# \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
endfunction

function! UncommentPy()
	vmap cz :s!^\(\s*\)# \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
	nmap cz :s!^\(\s*\)# \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
endfunction

function! CommentBat()
"	comment
	map cc :s!^!REM ! <CR> <ESC>:noh<CR>
	vmap cc :s!^!REM ! <CR> <ESC>:noh<CR>
" 	uncomment
	nmap cz :s!^\(\s*\)REM \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
	vmap cz :s!^\(\s*\)REM \{0,1\}\(.*\)!\1\2!<CR><ESC>:noh<CR>
endfunction

function! RunC()
" 	compile and run
	map <F5> :!start cmd /c start "vim run cpp" g++.lnk "%:p"<CR>
endfunction

function! Run()
	map <F5> :!start cmd /c start "vim run" nppCompileAndRun.lnk "%:p"<CR>
endfunction

" comment
autocmd filetype cc,cpp,java,c,h,hpp,cxx,php,javascript call UncommentC()
autocmd filetype cc,cpp,java,c,h,hpp,cxx,php,javascript call CommentC()
autocmd filetype vim call CommentVimrc()
autocmd filetype tex call CommentTex()
autocmd filetype python call CommentPy()

call Run()
autocmd filetype cc,cpp,c,h,hpp,cxx call RunC()

" taglist, make tag file
function! MakeCTags()
	map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>  
endfunction
function! MakeJavaTags()
	map <C-F12> :!ctags -R --java-kinds=+p --fields=+iaS --extra=+q .<CR>  
endfunction
autocmd filetype cc,cpp,c,h,hpp,cxx call MakeCTags()
autocmd filetype java call MakeJavaTags()

" select all
nmap <C-A> ggVG
" auto complete
imap <C-space> <C-N>
" redirect for ESC
imap fds <ESC>
map fds <ESC>
omap fds <ESC>
imap FDS <ESC>:echo "CAPS_LOCK!"<CR><ESC>
map FDS <ESC>:echo "CAPS_LOCK!"<CR><ESC>
omap FDS <ESC>:echo "CAPS_LOCK!"<CR><ESC>
" cmap append a <CR> after <ESC>, insert <BS> to remove all chars in cmmandline
" maybe it's a bug, there are 40 <BS>, gernerally enough
"cnoremap fds <BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><BS><ESC>
" or use <C-U> in command line to remove all char input
cnoremap fds <C-U><ESC>
cnoremap FDS <C-U><ESC>:echo "CAPS_LOCK!"<CR><ESC>

" deletion, use backspace as backspace key
function! MyBackspace()
	let curColumn=col(".")
"	echo curColumn
	if curColumn == 1
		echo "first column"
"		<ESC>k<DEL><ESC>
	else
		echo "not first column"
"		h"zx
	endif
endfunction

nmap <silent> <BS> h"zx
vmap <silent> <BS> h"zx
" open select file
vnoremap <M-g> "zy:!start cmd /c start npp_open_document.lnk "<C-R>z" "%:p" "vim"<CR>
vmap <M-g> "zy:!start cmd /c start npp_open_document.lnk "<C-R>z" "%:p" "vim"<CR>

" using * and # search for selected content
vnoremap <silent> * :<C-U>
	\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
	\gvy/<C-R><C-R>=substitute(
		\escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
	\gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
	\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
	\gvy?<C-R><C-R>=substitute(
		\escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
	\gV:call setreg('"', old_reg, old_regtype)<CR>

" adjust the window size
" :resize n or :vertical resize n, where n is the size in height/width
" horizontal size, height
nmap <M-]> :resize +1<CR>
nmap <M-[> :resize -1<CR>
" vertical size, width
nmap <M-=> :vertical resize +1<CR>
nmap <M--> :vertical resize -1<CR>
" maximize window
nmap <F11> :simalt ~x<CR>

" append ";" at the end of line, for cpp,php,js
imap ;; <ESC>A;
nmap ;; <ESC>A;<ESC>

" open recent 10 files
" for i in range(10)
" 	tabnew
" 	let str="normal! `"
" 	let str.=i
" 	exe str
" " 	echo str
" endfor

noh " nohlsearch

